{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/Select.ts","components/TodoModal/TodoModal.tsx","App.tsx","helpers.ts","index.tsx"],"names":["TodoList","todos","handleSelectedTodo","selectedTodo","className","map","todo","cn","id","completed","title","onClick","type","TodoFilter","query","selectedFilter","handleSelectFilter","handleSetQuery","value","onChange","event","target","placeholder","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Select","TodoModal","setSelectedTodo","useState","user","setUser","isLoaded","setIsLoaded","useEffect","userId","finally","href","email","name","App","setTodos","isLoading","setIsLoading","setQuery","DEFAULT","setSelectedFilter","visibleTodos","useMemo","selectFilter","filteredTodo","filter","titleLCase","toLowerCase","queryLCase","includes","trim","ACTIVE","COMPLETED","preperedTodos","status","newQuery","ReactDOM","render","document","getElementById"],"mappings":"oPAUaA,EAA4B,SAAC,GAAD,IACvCC,EADuC,EACvCA,MACAC,EAFuC,EAEvCA,mBACAC,EAHuC,EAGvCA,aAHuC,OAKvC,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,qBACE,UAAQ,OACRF,UAAWG,IAAG,CACZ,6BAAyC,OAAZJ,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOF,EAAKE,KAH3D,UAOE,oBAAIJ,UAAU,eAAd,SAA8BE,EAAKE,KACnC,oBAAIJ,UAAU,eAAd,SACGE,EAAKG,WACJ,sBAAML,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UACEE,EAAKG,UACD,mBACA,kBAJR,SAOGH,EAAKI,UAGV,oBAAIN,UAAU,8BAAd,SACE,wBACEO,QAAS,kBAAMT,EAAmBI,IAClC,UAAQ,eACRF,UAAU,SACVQ,KAAK,SAJP,SAME,sBAAMR,UAAU,OAAhB,SACE,mBAAGA,WACW,OAAZD,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOF,EAAKE,GACtB,aACA,6BAhCPF,EAAKE,aC1BPK,EAAwB,SAAC,GAAD,IACnCC,EADmC,EACnCA,MACAC,EAFmC,EAEnCA,eACAC,EAHmC,EAGnCA,mBACAC,EAJmC,EAInCA,eAJmC,OAMnC,uBAAMb,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRc,MAAOH,EACPI,SAAU,SAAAC,GAAK,OAAIJ,EAAmBI,EAAMC,OAAOH,QAHrD,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGd,UAAU,qDAAb,UACE,uBACEe,SAAU,SAAAC,GAAK,OAAIH,EAAeG,EAAMC,OAAOH,QAC/C,UAAQ,cACRN,KAAK,OACLR,UAAU,QACVkB,YAAY,YACZJ,MAAOJ,IAET,sBAAMV,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdU,GACC,sBAAMV,UAAU,gBAAhB,SACE,wBACEO,QAAS,kBAAMM,EAAe,KAC9B,UAAQ,oBACRL,KAAK,SACLR,UAAU,SACV,aAAW,oBChDVmB,G,MAAmB,kBAC9B,qBAAKnB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASoB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICrBKC,ECWCC,EAA6B,SAAC,GAGpC,IAFLjC,EAEI,EAFJA,aACAkC,EACI,EADJA,gBAGE7B,EAGEL,EAHFK,GACAE,EAEEP,EAFFO,MACAD,EACEN,EADFM,UAGF,EAAwB6B,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAQA,OANAC,qBAAU,WFDW,IAACC,KEEZpC,EFF+BgB,EAAG,iBAAiBoB,KEGxDb,KAAKS,GACLK,SAAQ,kBAAMH,GAAY,QAC5B,CAAClC,IAGF,sBAAKJ,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,sBAEbqC,GACA,cAAC,EAAD,IAGAF,GAAQE,GACR,sBAAKrC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYI,KAGZ,wBACEG,QAAS,kBAAM0B,EAAgB,OAC/BzB,KAAK,SACLR,UAAU,SACV,UAAQ,cACR,aAAW,aAIf,sBAAKA,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGM,IAGH,oBAAGN,UAAU,QAAQ,UAAQ,aAA7B,UACGK,EACI,wBAAQL,UAAU,mBAAlB,kBACA,wBAAQA,UAAU,kBAAlB,qBAEJ,OAED,mBAAG0C,KAAI,wBAAYP,QAAZ,IAAYA,OAAZ,EAAYA,EAAMQ,OAAzB,gBACGR,QADH,IACGA,OADH,EACGA,EAAMS,qB,SDtEXb,K,cAAAA,E,sBAAAA,E,iBAAAA,M,gBEcL,IAAMc,EAAgB,WAC3B,MAA0BX,mBAAiB,IAA3C,mBAAOrC,EAAP,KAAciD,EAAd,KACA,EAAkCZ,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAAwCd,mBAAsB,MAA9D,mBAAOnC,EAAP,KAAqBkC,EAArB,KACA,EAA0BC,mBAAiB,IAA3C,mBAAOxB,EAAP,KAAcuC,EAAd,KACA,EAA4Cf,mBAAiBH,EAAOmB,SAApE,mBAAOvC,EAAP,KAAuBwC,EAAvB,KAEAZ,qBAAU,WHAkBnB,EAAY,UGEnCO,KAAKmB,GACLL,SAAQ,kBAAMO,GAAa,QAC7B,IAEH,IAYMI,EAAeC,mBAAQ,WAC3B,OCrCG,SACLxD,EACAa,EACA4C,GAEA,IAAIC,EAAY,YAAO1D,GAWvB,GATIa,IACF6C,EAAeA,EAAaC,QAAO,SAAAtD,GACjC,IAAMuD,EAAavD,EAAKI,MAAMoD,cACxBC,EAAajD,EAAMgD,cAEzB,OAAOD,EAAWG,SAASD,EAAWE,YAItCP,EACF,OAAQA,GACN,KAAMvB,EAAO+B,OACXP,EAAeA,EAAaC,QAAO,SAAAtD,GAAI,OAAKA,EAAKG,aACjD,MAEF,KAAM0B,EAAOgC,UACXR,EAAeA,EAAaC,QAAO,SAAAtD,GAAI,OAAIA,EAAKG,aAChD,MAEF,QACE,OAAOkD,EAIb,OAAOA,EDMES,CAAcnE,EAAOa,EAAOC,KAClC,CAACD,EAAOC,EAAgBd,IAE3B,OACE,qCACE,qBAAKG,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEU,MAAOA,EACPC,eAAgBA,EAChBC,mBAvBa,SAACqD,GAC1Bd,EAAkBc,IAuBNpD,eApBS,SAACqD,GACtBjB,EAASiB,QAuBD,qBAAKlE,UAAU,QAAf,SACG+C,EACC,cAAC,EAAD,CACElD,MAAOuD,EACPtD,mBApCW,SAACI,GAC1B+B,EAAgB/B,IAoCFH,aAAcA,IAGhB,cAAC,EAAD,aAOTA,GACC,cAAC,EAAD,CACEA,aAAcA,EACdkC,gBAAiBA,QE1E3BkC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ae77bdb8.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n  handleSelectedTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  handleSelectedTodo,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className={cn({\n            'has-background-info-light': selectedTodo?.id === todo.id,\n          })}\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={\n                todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger'\n              }\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              onClick={() => handleSelectedTodo(todo)}\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n            >\n              <span className=\"icon\">\n                <i className={\n                  selectedTodo?.id !== todo.id\n                    ? 'far fa-eye'\n                    : 'far fa-eye-slash'\n                }\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { FC } from 'react';\nimport { Select } from '../../types/Select';\n\ntype Props = {\n  query: string,\n  selectedFilter: Select,\n  handleSelectFilter: (status: Select) => void,\n  handleSetQuery: (value: string) => void,\n};\n\nexport const TodoFilter: FC<Props> = ({\n  query,\n  selectedFilter,\n  handleSelectFilter,\n  handleSetQuery,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={selectedFilter}\n          onChange={event => handleSelectFilter(event.target.value as Select)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        onChange={event => handleSetQuery(event.target.value)}\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\">\n          <button\n            onClick={() => handleSetQuery('')}\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            aria-label=\"delete\"\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Select {\n  DEFAULT = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo;\n  setSelectedTodo: React.Dispatch<React.SetStateAction<Todo | null>>;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n  } = selectedTodo;\n\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    getUser(id)\n      .then(setUser)\n      .finally(() => setIsLoaded(true));\n  }, [id]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!isLoaded && (\n        <Loader />\n      )}\n\n      {(user && isLoaded) && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              onClick={() => setSelectedTodo(null)}\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"close\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Select } from './types/Select';\nimport { preperedTodos } from './helpers';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState<string>('');\n  const [selectedFilter, setSelectedFilter] = useState<Select>(Select.DEFAULT);\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .finally(() => setIsLoading(true));\n  }, []);\n\n  const handleSelectedTodo = (todo: Todo) => {\n    setSelectedTodo(todo);\n  };\n\n  const handleSelectFilter = (status: Select) => {\n    setSelectedFilter(status);\n  };\n\n  const handleSetQuery = (newQuery: string) => {\n    setQuery(newQuery);\n  };\n\n  const visibleTodos = useMemo(() => {\n    return preperedTodos(todos, query, selectedFilter);\n  }, [query, selectedFilter, todos]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                selectedFilter={selectedFilter}\n                handleSelectFilter={handleSelectFilter}\n                handleSetQuery={handleSetQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <TodoList\n                  todos={visibleTodos}\n                  handleSelectedTodo={handleSelectedTodo}\n                  selectedTodo={selectedTodo}\n                />\n              ) : (\n                <Loader />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Select } from './types/Select';\nimport { Todo } from './types/Todo';\n\nexport function preperedTodos(\n  todos: Todo[],\n  query: string,\n  selectFilter: Select,\n): Todo[] {\n  let filteredTodo = [...todos];\n\n  if (query) {\n    filteredTodo = filteredTodo.filter(todo => {\n      const titleLCase = todo.title.toLowerCase();\n      const queryLCase = query.toLowerCase();\n\n      return titleLCase.includes(queryLCase.trim());\n    });\n  }\n\n  if (selectFilter) {\n    switch (selectFilter) {\n      case (Select.ACTIVE):\n        filteredTodo = filteredTodo.filter(todo => !todo.completed);\n        break;\n\n      case (Select.COMPLETED):\n        filteredTodo = filteredTodo.filter(todo => todo.completed);\n        break;\n\n      default:\n        return filteredTodo;\n    }\n  }\n\n  return filteredTodo;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}